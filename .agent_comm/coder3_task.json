{
  "agent_id": "coder3",
  "task_id": "task_3",
  "files": [
    {
      "name": "memory.py",
      "purpose": "Experience replay and memory",
      "priority": "medium"
    },
    {
      "name": "reward_system.py",
      "purpose": "Reward calculation and shaping",
      "priority": "medium"
    }
  ],
  "project_info": {
    "project_name": "enhanced_cs.AI_2508.20095v1_Discrete_Guided_Diffusion_for_Scalable_and_Safe_Mu",
    "project_type": "agent",
    "description": "Enhanced AI project based on cs.AI_2508.20095v1_Discrete-Guided-Diffusion-for-Scalable-and-Safe-Mu with content analysis. Detected project type: agent (confidence score: 7 matches).",
    "key_algorithms": [
      "Programming",
      "Sota",
      "Current",
      "Machine",
      "Straightforward",
      "Trajectories",
      "Generative",
      "Hybrid",
      "Trajectory",
      "Decomposition"
    ],
    "main_libraries": [
      "torch",
      "numpy",
      "pandas"
    ]
  },
  "paper_content": "PDF: cs.AI_2508.20095v1_Discrete-Guided-Diffusion-for-Scalable-and-Safe-Mu.pdf\nChunk: 1/1\n==================================================\n\n--- Page 1 ---\nDISCRETE -GUIDED DIFFUSION FOR SCALABLE AND SAFE\nMULTI -ROBOT MOTION PLANNING\nJinhao Liang\nUniversity of Virginia\njliang@email.virginia.eduSven Koenig\nUniversity of California, Irvine\nsven.koenig@uci.eduFerdinando Fioretto\nUniversity of Virginia\nfioretto@virginia.edu\nABSTRACT\nMulti-Robot Motion Planning (MRMP) involves generating collision-free trajectories for multiple\nrobots operating in a shared continuous workspace. While discrete multi-agent path finding (MAPF)\nmethods are broadly adopted due to their scalability, their coarse discretization severely limits tra-\njectory quality. In contrast, continuous optimization-based planners offer higher-quality paths but\nsuffer from the curse of dimensionality, resulting in poor scalability with respect to the number of\nrobots. This paper tackles the limitations of these two approaches by introducing a novel framework\nthat integrates discrete MAPF solvers with constrained generative diffusion models. The resulting\nframework, called Discrete-Guided Diffusion (DGD), has three key characteristics: (1) it decomposes\nthe original nonconvex MRMP problem into tractable subproblems with convex configuration spaces,\n(2) it combines discrete MAPF solutions with constrained optimization techniques to guide diffu-\nsion models capture complex spatiotemporal dependencies among robots, and (3) it incorporates a\nlightweight constraint repair mechanism to ensure trajectory feasibility. The proposed method sets a\nnew state-of-the-art performance in large-scale, complex environments, scaling to 100 robots while\nachieving planning efficiency and high success rates.\nKeywords Diffusion Models \u00b7Multi-Agent Path Planning \u00b7Multi-Robot Motion Planning\n1 Introduction\nMulti-Robot Motion Planning (MRMP) is a fundamental problem in robotics that requires generating collision-free\ntrajectories for multiple robots operating in a shared environment. MRMP arises in diverse applications such as\nautomated warehouses, coordinated drone fleets, and autonomous driving. Despite its importance, efficiently solving\nMRMP in complex environments remains a significant challenge due to the high dimensionality and combinatorial\ncomplexity Yu and LaValle [2013].\nTo address these challenges, two major paradigms have emerged. Optimization-based methods formulate the problem\nas a continuous, often nonconvex trajectory optimization problem and are capable of producing smooth, high-quality\npaths Marcucci et al. [2023]. However, their scalability is severely limited as the number of robots and obstacles\nincreases. Another body of work considers a discretized version of MRMP, known as Multi-Agent Path Finding\n(MAPF). It discretizes the space and time, significantly reducing computational complexity Li et al. [2021], Okumura\n[2024]. MAPF algorithms scale to hundreds of robots, but their reliance on discretized grid-based movement and\nsynchronized time steps limits their applicability in continuous and dynamic environments.\nTo address these limitations, recent work has explored the use of generative models, particularly diffusion models, to\nlearn distributions over trajectories in continuous spaces Xiao et al. [2022], Carvalho et al. [2023]. These models show\npromising results in single-robot planning as they enable diverse and high-quality trajectory generation. However, their\nextension to multi-robot settings introduces significant challenges: Diffusion models must capture complex inter-robot\nspatiotemporal dependencies while simultaneously avoiding collisions , a problem that becomes highly intractable as\nthe number of robots and obstacles grows.\nSeveral recent approaches attempt to extend diffusion models to MRMP via gradient-based guidance Shaoul et al. [2024],\nDing et al. [2025]. These methods are able to generate high quality trajectories, but are limited by two key challenges:arXiv:2508.20095v1  [cs.RO]  27 Aug 2025\n\n--- Page 2 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nMRMP Problem S1: Convex Decomp S2: ST Assignment S3: Traj. Generation S4: Constr. Repair\nDiffusion Sampling Steps\nFigure 1: Overview of Discrete-Guided Diffusion. S1shows that the nonconvex configuration space is approximated by\nmultiple convex regions. The wheat regions denote the obstacles, and the green regions denote the free space. The\nrobots move from their start \u2022to their goal positions \u22c6.S2illustrates that the local start and goal for each robot in\neach subproblem is determined by the spatiotemporal dependency obtained from MAPF solutions. S3shows that the\ntrajectory is generated by diffusion models guided by discrete spatiotemporal dependency. Collision is marked by \u2738.\nS4shows that the infeasible problem is repaired by constraint-aware diffusion models.\nFirst, the difficulty of ensuring the feasibility of the generated trajectories with respect to non-collision and kinodynamic\nconstraints. This is hard since gradient-based guidance cannot natively guarantee global constraint satisfaction. Second,\nthese models struggle in cluttered or dense environments, where the complexity of the configuration space increases.\nRecently, Liang et al. [2025] proposed an approach to ensure feasibility through repeated projections within the\ndiffusion process. This is a promising solution, but it comes at a high computational overhead, due to the nonconvexity\nand high dimensionality of constraints.\nContribution. This paper addresses these challenges through a novel integration of discrete MAPF with continuous\ndenoising diffusion. The proposed Discrete-Guided Diffusion (DGD), first decomposes the original MRMP problem\ninto a sequence of local subproblems with convex configuration space, each defined by the spatiotemporal structure\nobtained from the MAPF solution. On each subproblem, a diffusion model is then used to generate trajectories guided\nby this spatiotemporal structure. To ensure feasibility, DGD relies on a lightweight projected guidance rendering each\nstep of the diffusion process feasible, and enforced only when constraint violations are detected. The whole framework\nis schematically illustrated in Figure 1. The effectiveness and efficiency of DGD is demonstrated both theoretically and\npractically across a range of challenging benchmarks with up to 100+ robots.\n2 Related Work\nIn this section, we review three research areas that form the foundation for our work: multi-robot motion planning\n(MRMP), discrete multi-agent path finding (MAPF), and generative models for motion planning. We summarize the\nkey methods and challenges in each area, highlighting the scalability, constraint handling, and feasibility guarantees\nthat motivate our proposed approach.\nMulti-robot Motion Planning. MRMP methods address trajectory generation for multiple robots in continuous\nspace. There are two main approaches for MRMP: (1)Sampling-based algorithm, where constructs feasible trajectories\nby randomly sampling the state space Gammell et al. [2014], Shome et al. [2020]. While sampling-based planners are\nprobabilistically complete, they require dense sampling and struggle to enforce continuous kinodynamic constraints,\nlimiting their practical applications. (2)Optimization-based planner, where the planning problem is formulated as\nan optimization program, such as a sequential convex program Augugliaro et al. [2012], Park et al. [2020] and a\nmixed-integer program Mellinger et al. [2012]. While optimization-based methods can handle various constraints,\nextending them to the multi-robot case couples all robots into a single high-dimensional optimization problem, suffering\nfrom exponential growth in decision variables and local minima. Recently, Graph of Convex Sets (GCS) has been\nproposed to mitigate this issue for single robot motion planning by decomposing the environment into a collection of\nconvex regions Marcucci et al. [2023], Chia et al. [2024]. However, applying GCS to MRMP is quite challenging due\nto the spatiotemporal dependencies among multiple robots.\n2\n\n--- Page 3 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nDiscrete Multi-agent Path Finding. Multi-agent path finding (MAPF) focuses on a discretized version of MRMP\nby discretizing both time and space into steps and grids, respectively Stern et al. [2019]. The MAPF literature has\nproduced highly scalable algorithms such as Conflict-Based Search (CBS) and its bounded-suboptimal variants Sharon\net al. [2015], Li et al. [2021], Okumura [2024]. These planners can coordinate hundreds of agents with correctness\nand solution quality guarantees in grid worlds by resolving pairwise collisions in a low-dimensional discrete space\nand have been adopted in large automated-warehouse deployments. However, their reliance on synchronized, axis-\naligned motions and fixed timesteps makes it difficult to transfer the resulting plans to real robots with continuous\ndynamics, kinodynamic limits, or tight clearances; post-processing heuristics such as temporal smoothing or continuous\nre-planning only partially mitigate this gap H\u00f6nig et al. [2018].\nGenerative models for motion planning. Diffusion generative models have recently emerged as a powerful alter-\nnative to sampling-based and optimization planners, learning a distribution over continuous trajectories that captures\nmultimodality without hand-tuned costs Xiao et al. [2022], Carvalho et al. [2023], Luo et al. [2024]. While early work\nfocused on single-robot problems, extending to multi-robot motion planning requires enforcing joint collision and\nkinodynamic constraints, which dramatically increases the complexity of the diffusion process.\nTo address this issue, the recent literature has explored three main strategies: (i) Classifier or gradient guidance adds an\nexternal collision penalty during the reverse process Ding et al. [2025]. Although simple, guidance offers no guarantees\non constrained satisfaction and degrades in dense environments. Shaoul et al. [2024] extends this approach by using\ndiffusion models as the single-robot planner in a constraint-based MAPF framework, but this process utilizes diffusion to\ngenerate single-robot trajectories without explicitly modeling inter-robot interactions. (ii) Constrained score estimation\nmethods learn the score function with added penalty terms Naderiparizi et al. [2025], but constraints satisfaction still\ncannot be guaranteed. (iii) Finally, Projection-based refinement methods, Liang et al. [2025], interleaves diffusion steps\nwith a nonlinear projection onto the global feasible set. This approach produces provably collision-free trajectories\nfor a few robots and is therefore central to our discussion and later comparisons. Nonetheless, the need to solve a full\nhigh-dimensional projection at every diffusion step incurs substantial computational overhead and limits scalability to\nlarger teams.\nTo address these limitations, the proposed Discrete-Guided Diffusion (DGD) exploits a hybrid approach where a MAPF-\nderived spatiotemporal skeleton is fused with a constraint-aware diffusion process inside locally convex subproblems,\navoiding Liang et al.\u2019s costly global projections while preserving formal feasibility and yielding state-of-the-art\nperformance on large-scale MRMP benchmarks.\n3 Preliminaries\nMulti-Robot Motion Planning (MRMP). MRMP involves computing collision-free trajectories for multiple robots\nnavigating a shared environment from designated start positions to goal states. Let A={a1, . . . , a Na}be a set of Na\nrobots that move in a bounded, planar workspace W \u2282R2containing a set of static obstacles O={o1, . . . , o No}.\nThefree configuration space is defined as the set of all points in the workspace that are not occupied by obstacles:\nCf:=W \\\u0000S\no\u2208Oo\u0001\n.\nEach robot aiis modeled as a disk of radius ri>0and is characterized at discrete time steps h\u2208 {0, . . . , H }by a 2-D\nposition \u03c0h\ni= (xh\ni, yh\ni)\u2208 Cf.Atrajectory for robot aiis the sequence \u03c0i:= (\u03c00\ni, \u03c01\ni, . . . , \u03c0H\ni).For each robot, their\nstart and target states are defined by sets B= [b1, b2, . . . , b Na]andE= [e1, e2, . . . , e Na].\nThe goal of MRMP is to compute a set of trajectories \u03a0={\u03c01,\u03c02, . . . ,\u03c0Na}such that each robot starts at its\ndesignated start position and reaches its target position while avoiding collisions with obstacles and other robots. For\nevery time index hwe require\n\u03c0h\ni\u2208 Cf, \u2200i, (1a)\n\u2225\u03c0h\ni\u2212\u03c0h\nj\u22252\u2265ri+rj, \u2200i < j, (1b)\n\u2225\u03c0h+1\ni\u2212\u03c0h\ni\u22252\u2264vmax\u2206t, \u2200i, h < H, (1c)\nwhere (1a)enforces obstacle avoidance, (1b) inter-robot separation, and (1c)a first-order kinematic bound with time\nstep\u2206tand speed limit vmax.\nMulti-Agent Path Finding (MAPF). In contrast, Multi-Agent Path Finding assumes the configuration space and\ntime to be discretized , which significantly reduces the complexity of the original problem. The workspace is represented\nby an undirected graph G= (V, E)whose vertices encode grid cells or roadmap milestones. The input to a MAPF\nproblem is a tuple \u27e8G,S,T\u27e9, where S:[1, . . . , k ]\u2192Vmaps robots to their source vertices and T:[1, . . . , k ]\u2192Vmaps\n3\n\n--- Page 4 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nrobots to their target vertices. At each integer time step t, robot ioccupies a vertex vt\ni\u2208Vand chooses either a wait\naction or an edge (vt\ni, vt+1\ni)\u2208E.\nThe result of a MAPF algorithm is a set of discrete multi-robot trajectories \u03a0M={\u03c0m,1,\u03c0m,2, . . . ,\u03c0m,N a},\nspecifying the grid location of each robot at every time step, satisfying vertex conflicts vt\ni\u0338=vt\nj\u2200i\u0338=j, tand edge\nconflicts (vt\ni, vt+1\ni)\u0338= (vt+1\nj, vt\nj)\u2200i\u0338=j, t.\nThe Discrete-Continuous Gap\nThe MAPF solution \u03a0Msatisfies the constraints of the discrete problem, but it does not directly translate to a continuous\ntrajectory for the robots. To obtain a continuous trajectory, three key challenges arise:\n1. Embedding the vertices VofGin the continuous space Cf, which may not be a grid.\n2.Time-parameterizing each edge into a collision-free segment that respects constraint (1c). This requires ensuring\nthat the trajectory segments do not violate the kinematic limits of the robots.\n3.Although the MAPF solution ensures discrete collision avoidance, it does not exploit constraint (1b) in the continuous\nspace, which can result in suboptimal solutions.\nA coarse grid may also lead to unrealistic motions or infeasible timing, whereas a fine grid blows up the state space\nexponentially, making MAPF itself expensive. To contrast these challenges, this paper proposes a framework that\nleverages MAPF solely as a structural guide while a continuous diffusion model refines the trajectories to respect (1a)\u2013\n(1c).\n4 Discrete-Guided Diffusion Framework\nSolving the MRMP problem poses two fundamental challenges. First, MRMP is NP-hard and the complexity grows\nexponentially with the number of robots, making it difficult to scale to large problems while preserving high-quality\ntrajectories generation. Second, although generative models offer better scalability and trajectory quality, ensuring the\nfeasibility of entire trajectories remains challenging, particularly in high-dimensional planning spaces.\nTo address these challenges, this section presents an MRMP framework that couples a discrete MAPF backbone with a\ncontinuous score-based diffusion model to generate high-quality trajectories for multiple robots. The framework, called\nDiscrete-Guided Diffusion (DGD). Specifically, the first two stages mitigate the scalability challenge, and the next two\nstages address the challenge of constraint satisfaction and trajectory quality in high-dimensional spaces:\nS1Priority-based Convex Decomposition (PBD): approximation of the nonconvex free configuration space Cf\nusing nonoverlapping convex regions to enable problem decomposition (Section 4.1)\nS2Spatiotemporal assignment : determination of entry and exit events for each convex region by leveraging\nspatiotemporal dependencies extracted from a MAPF solution \u03a0M(Section 4.2).\nS3Diffusion-based Trajectory Generation : generation of high-quality trajectories for each subproblem using a\ndiffusion model guided by \u03a0M(Section 4.3).\nS4Constraint-aware Diffusion Refinement : correction of infeasible trajectories through constraint-aware diffusion\nmodels by introducing a lightweight projection mechanism to enforce constraint satisfaction (Section 4.4).\nProofs for the theoretical results discussed in this section are referred to Appendix A.\n4.1 Priority-Based Convex Decomposition\nRecent advancements in single-robot planning replace the original nonconvex configuration space Cfwith a union of\nconvex polytopes , enabling single-robot motion planning to be formulated as convex programs Werner et al. [2024a,b].\nThe current state-of-the-art, the Visibility Clique Cover (VCC) algorithm Werner et al. [2024a], combines clique-based\nsampling with IRIS-style region inflation to approximate the free configuration space using a small number of large\nconvex polytopes. While this eliminates nonconvex obstacle avoidance constraints, the resulting polytopes overlap\nheavily in practice. As shown in Figure 2a, VCC produces substantially more sets than required to cover Cf, highlighting\nthe inefficiency introduced by overlapping regions. For MRMP, this is problematic for two reasons: (i)First, overlap\nexplodes the number of discrete mode switches that must be co-optimized, and (ii)Second, a single robot may lie in\nseveral polytopes at once, making a clean decomposition into independent subproblems impossible. This motivates us\nto find more compact and structure-aware representations.\n4\n\n--- Page 5 ---\nLiang, Koenig and Fioretto \u2013 preprint.\n(a) VCC\n (b) PBD\nFigure 2: Comparison of Configuration Space Decomposition results between Visibility Clique Cover (VCC) and the\nproposed priority-based decomposition (PBD). Yellow objects represent obstacles, and each green-filled polygon with a\nblack border indicates a convex region generated by the decomposition methods.\nPriority-based Decomposition (PBD). To address these limitations, we introduce a novel decomposition approach\nthat guarantees non-overlapping convex regions while optimizing for robot traffic patterns. This method builds upon\ncomputational geometry techniques, inspired by the Hertel-Mehlhorn algorithm Hertel and Mehlhorn [1983]. It\nproduces a partition Cc\nf={R1, R2, . . . , R k}where Ri\u2229Rj=\u2205fori\u0338=jandSk\ni=1Ri\u2208 C f, ensuring each robot\nbelongs to exactly one region at any time .\nAlgorithm 1 Priority-based Decomposition (PBD)\n1:Input: Configuration space Cf, MAPF solution \u03a0M\n2:Output: Non-overlapping convex partition Cc\nf\n3:R\u2190RemoveHoles (Cf){Create Simple Polygon}\n4:R\u2190InitialRegions (R){Triangulation}\n5: Compute priority p(r)for each r\u2208R\n6: Build adjacency graph Adj[r]for each r\u2208R\n7:H \u2190 CreateMaxHeap (R,Adj, p)\n8:whileHnot empty do\n9: (r1, r2)\u2190 H.pop()\n10: if(r1/\u2208R)\u2228(r2/\u2208R)\u2228IsNotConvex (r1\u222ar2)then\n11: continue\n12: end if\n13: rnew\u2190r1\u222ar2\n14: Update RandAdj by replacing r1, r2withrnew\n15: Update Hwith new pairs involving rnew\n16:end while\n17:return Cc\nf\u2190RThis eliminates the critical issue in overlapping meth-\nods, where a single point may belong to multiple\nregions, resulting in larger subproblems due to redun-\ndant coverage and making parallelization difficult, as\nsubproblems are no longer independent. The decom-\nposition is performed in two steps:\n1.Triangulate CfinO(|V|log|V|)time, where\nVis a set of all vertices.\n2.Iteratively remove diagonals to merge adja-\ncent triangles, but prioritize edges that con-\nnect regions with the highest robot traffic\naccording to the MAPF solution \u03a0M.\nThe resulting Priority-Based Decomposition keeps\nthe number of regions proportional to where the robots\nactually need maneuvering, dramatically reducing the\ndownstream dimension required for diffusion, as illus-\ntrated in Figure 2b. The detailed procedure is shown\nin Algorithm 1.\nTheorem1 (Sound, compact, and efficient) .PBD outputs a finite set Cc\nfof pairwise disjoint convex polygons satisfyingS\nR\u2208Cc\nfR\u2208 Cf. Its runtime is O(|V|log|V|), where Vare the vertices of the triangulation.\nSketch of Proof. The runtime follows from (1) hole removal and triangulation in O(|V|log|V|)time, and (2) at most\nO(|V|)heap-based merge operations, each taking O(log|V|)time.\nRemark1 (Region count) .Empirically, PBD eliminates up to 32.6% of redundant convex regions across our benchmark\nscenarios. Compared to the baseline Visibility Clique Cover, it reduces the total number of region sets by over 50%,\nwhile also achieving faster runtime. This directly translates to a comparable reduction in the number of diffusion model\ncalls required for trajectory generation.\n5\n\n--- Page 6 ---\nLiang, Koenig and Fioretto \u2013 preprint.\n4.2 MAPF-Driven Spatiotemporal Assignment\nWhile PBD yields a non-overlapping spatial partition Cc\nf={R1, . . . , R k}, this alone is insufficient for decomposing\nMRMP. In multi-robot systems, coordination hinges not only on spatial separation but also on the spatiotemporal\nordering of robot actions . Even when robots are assigned to disjoint regions, their trajectories can remain interdependent\ndue to timing constraints. A central challenge lies in determining when andwhere each robot should enter or exit\nspecific regions. These decisions introduce temporal coupling between otherwise spatially decoupled subproblems.\nWithout resolving this temporal-spatial assignment, region-based planning cannot guarantee global feasibility.\nTo address this challenge, this paper makes a key observation: a discrete MAPF solution \u03a0M={\u03c0m,i}Na\ni=1inherently\nencodes a coarse spatiotemporal collision schedule . Thus, rather than leveraging \u03a0Mfor its specific paths, we extract\nand exploit its embedded coordination structure. Although MAPF operates in a discretized space-time domain, it\neffectively resolves collisions and preserves essential inter-agent dependencies. In particular, for each robot aiand\nregion Rj, we extract two key events:\n\u2022Exit event: Time toutand position \u03c0out, sich that \u03c0m,i(tout)\u2208Rjand\u03c0m,i(tout+1)/\u2208Rj.\n\u2022Entry event: Time tinand position \u03c0in, such that \u03c0m,i(tin)\u2208Rkand\u03c0m,i(tin\u22121)/\u2208Rk.\nFrom these, we construct a structured transition set: T=\b\n(ai, Rj, tout,\u03c0out, Rk, tin,\u03c0in)\t\n, where each tuple\nindicates that agent aiexits region Rjat(tout,\u03c0out)and enters region Rkat(tin,\u03c0in). These transitions provide start\nand goal constraints for region-level diffusion models, enabling temporally consistent and spatially decoupled planning.\nThe transition set Tis constructed by a single forward pass through the MAPF trajectories and the region map\n(see Algorithm 2 for details), as illustrated in S2of Figure 1. Its structural utility is formalized as follows.\nAlgorithm 2 Region Transition Extraction\n1:Input: Convex regions Cc\nf, MAPF solution \u03a0M\n2:Output: T={(ai, Rj, tout, \u03c0out, Rk, tin, \u03c0in)}\n3:T \u2190 \u2205\n4:forrobot ai, region RjandRk, time tdo\n5: if\u03c0M,i(t)\u2208Rjand\u03c0M,i(t+ 1)\u2208Rkthen\n6: Record transition: (ai, Rj, t,\u03c0M,i(t), Rk, t+\n1,\u03c0M,i(t+ 1))\n7: end if\n8:end for\n9:return TProposition1 (Valid subproblem decomposition) .Fix\nany transition set Tobtained from \u03a0MandCc\nf. Then:\n(a)Each robot is uniquely assigned to one region\nR\u2208 Cc\nfat each time step.\n(b)Within each region R, the set of robot trajecto-\nries is temporally bounded by entry/exit events\ninT.\n(c)There are no inter-region constraints at any time\nstep, so each region defines an independent sub-\nproblem.\nSketch of Proof. Disjointness of regions ensures spatial uniqueness. The time-based conditions in Algorithm 2 ensure\nthat each robot\u2019s regional assignment is temporally non-overlapping. Feasibility constraints in MRMP (e.g., inter-robot\ncollision) only apply to robots simultaneously present in the same region.\n4.3 Diffusion-based trajectory generation\nBy decomposing the original problem into multiple independent subproblems, we are able to operate within smaller,\ndecoupled subspaces. This improves runtime efficiency andsample quality. In this subsection, we describe how\ndiffusion models are used to generate high-quality trajectories within each subproblem, as illustrated in S3of Figure 1.\nDiffusion modesl \u2013 preliminaries Denoising Diffusion Probabilistic Models Sohl-Dickstein et al. [2015], Ho et al.\n[2020], Song et al. [2020] define a generative process by learning to reverse a forward stochastic transformation\nthat progressively corrupts structured data into noise. The generative model then approximates the inverse of this\ntransformation to restore the original structure, allowing sampling from the learned distribution. The diffusion model is\nthus trained to minimize the difference between the estimated and true scores of the perturbed data. Once trained, the\nscore network s\u03b8is used to denoise random samples xT\u223c N(0, I)by iteratively updating xtalong the score direction\nuntil the samples resemble the original data. This is also known as the sampling phase , which follows the Stochastic\nGradient Langevin Dynamics (SGLD) update rule:\nxt=xt+1+\u03f5\n2s\u03b8(xt+1, t+ 1) +\u221a\u03f5\u00b7z, (2)\nwhere \u03f5denotes the step size and zis standard Normal.\n6\n\n--- Page 7 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nTrajectory Generation using Diffusion Models To facilitate the generation of collision-free trajectories by diffusion\nmodels, a straightforward method is to bias the sampling process by incorporating gradient-based guidance to encourage\nthe robot to avoid obstacles and other robots. This can be achieved by adding a penalty term into Eq. (2):\nxt=xt+1+\u03f5\n2(s\u03b8(xt+1, t+ 1) + J(xt+1,O)) +\u221a\u03f5\u00b7z,\nwhere\nJ(xt,O) =NaX\ni=1\u2207xdo\u0000\nxi\nt,O\u0001\n+NaX\ni=1\u2207xda\u0000\nxi\nt,x\u2212i\nt\u0001\n.\nWe define the obstacle and inter-agent penalty functions based on the squared L2-norm distance:\ndo(\u03c0i,O) =HX\nh=0X\noj\u2208Omax\b\n0, ro\ni,j\u2212\n\n\u03c0h\ni\u2212oj\n\n2\t\n,\nda(\u03c0i,\u03a0\u2212i) =HX\nh=0X\n\u03c0j\u2208\u03a0\u2212imaxn\n0, ra\ni,j\u2212\n\n\u03c0h\ni\u2212\u03c0h\nj\n\n2o\n,\nwhere do(\u00b7)andda(\u00b7)measure the violation of minimum safety distances ro\ni,jandra\ni,jbetween robot aiand obstacle oj,\nand between robots aiandaj, respectively. \u03a0\u2212idenotes the set of trajectories of all robots except ai.\nIncorporating the penalty term into the sampling process allows the diffusion model to sample trajectories that follow\nthe learned distribution while softly enforcing task requirements (e.g., collision avoidance). However, the guidance\nterm alone does not guarantee that each trajectory remains within its assigned convex region, which is essential for\nmaintaining independence across subproblems.\nFortunately, since each subproblem is defined over a convex domain, we can efficiently enforce this constraint by\nprojecting each intermediate sample back onto the feasible set. To this end, we integrate a convex projection operator\nPCc\nfinto the SGLD update rule with minimal computational overhead:\nxt=PCc\nf(xt),\nwherePCc\nf(x) = arg min y\u2208Cc\nf\u2225x\u2212y\u22252\n2denotes the Euclidean projection onto the feasible convex region Cc\nfassociated\nwith the specific subproblem.\nTheorem2 (Obstacle avoidance) .Letx0denotes the trajectory generated by diffusion models with projection operator\nPCc\nf. For arbitrary small \u03be, there exist tsuch thatPNa\ni=1\u2207xdo(x0,O)\u2264\u03be.\nSketch of Proof. SinceCc\nfis a convex set, the projection operator PCc\nfguarantees that the generated trajectory lies\nwithin this feasible set Christopher et al. [2024]. Moreover, sinceS\nR\u2208Cc\nfR\u2286 C f, andCfdenotes the free configuration\nspace, the generated trajectories satisfy the obstacle avoidance constraints.\nAdditionally, beyond extracting timing structure, the MAPF plan \u03a0Mprovides a strong trajectory prior . Thus, inspired\nby recent work on Diffusion Models Inversion Meng et al. [2022], Rout et al. [2025], which shows that even an\nimperfect or suboptimal initial solution can lead to better performance than sampling from pure noise. Motivated by\nthis, we adopt a similar strategy to improve sampling efficiency and quality. Unlike standard diffusion models that start\nfrom Gaussian noise xT\u223c N(0, I), we leverage a valid but suboptimal solution from a MAPF solver to initialize the\ndiffusion model\u2019s reverse process xT=\u03a0M, which provides a strong structural prior for the sampling process.\n4.4 Constraint-aware Diffusion Refinement\nThe previous stages ensure that each trajectory remains within its assigned convex region and satisfies obstacle avoidance\nconstraints. For inter-robot collision avoidance, although multiple guidance methods have been introduced to encourage\ngenerating collision-free trajectories, these mechanisms do not provide strict guarantees, especially with a large number\nof robots.\nTo address this limitation, we examine each region separately and introduce a Constraint-aware Diffusion refinement\nstep to repair the infeasible subproblems, as shown in S4of Figure 1. If any constraint in (1a)\u2013(1b) is violated, we run a\nconstraints-aware diffusion model to obatin the feasible solution. Specifically, we introduce anther projection operator\nP\u03a0into the SGLD update rule:\nxt=P\u03a0(xt),\n7\n\n--- Page 8 ---\nLiang, Koenig and Fioretto \u2013 preprint.\n(a) Basic.\n (b) Dense.\n (c) Room.\n (d) Shelf.\nFigure 3: Examples of benchmark used for MRMP experiments, with increasing complexity. Colorful spheres and\nplates denote the start and goals of robots. White objects indicate obstacles.\nwhere\nP\u03a0(x) = arg min\ny\u2225x\u2212y\u22252\n2s.t. Eq. (1b), (1c) .\nTo solve P\u03a0more efficiently, we use a Lagrangian dual method, where the constraints are incorporated into a relaxed\nobjective by using Lagrange multipliers \u03bd:\nL(y,\u03bd) =\u2225x\u2212y\u22252\n2+\u03bdXNa\ni=1\u2207yda\u0000\nyi\nt,y\u2212i\nt\u0001\n,\nTo accelerate the convergence, a quadratic penalty term \u03c1is introduced, and the augmented Lagrangian function is\ndefined as:\nLalm(y,\u03bd) =L(y,\u03bd) +\u03c1\u2225XNa\ni=1\u2207yda\u0000\nyi\nt,y\u2212i\nt\u0001\n\u22252.\nA dual ascent strategy is used to solve the relaxed problem, where the primal variable x\u2032is updated via gra-\ndient descent on the augmented Lagrangian Lalm(y,\u03bd), and the dual variable \u03bdis updated according to \u03bd\u2190\n\u03bd+\u03c1\n\n\nPNa\ni=1\u2207yda\u0000\nyi\nt,y\u2212i\nt\u0001\n\n\n2\n.The penalty coefficient \u03c1is gradually increased to enforce the constraints more\nstrictly. This iterative process continues until the residual of the collision avoidance constraints falls below a predefined\nthreshold, at which point the algorithm returns a feasible trajectory.\nRemark2. Although inter-robot collision avoidance constraints are generally difficult to handle in MRMP due to\ntheir nonconvexity and high dimensionality, our approach focuses only on resolving such constraints within infeasible\nsubproblems. These subproblems operate in significantly lower-dimensional spaces compared to the global problem.\nMoreover, by applying a Lagrangian relaxation, we further simplify the optimization landscape, making the constraint\nrepair process highly efficient in practice.\n5 Experiments\n5.1 Experimental Setup\nSettings. To evaluate the performance of diffusion-based MRMP algorithms, we design two experimental settings\ntargeting different aspects of the problem. (1) Feasibility, Efficiency, Quality: We adopt a diverse MRMP benchmark\nintroduced in Liang et al. [2025], which includes four representative map types: random maps with varying obstacle\ndensities (basic and dense), and structured maps mimicking real-world environments (room and shelf layouts). For\neach map type, we consider six robot counts (3, 6, 9, 12, 15, and 18), and evaluate across 25 instances with different\nconfigurations. Illustrations of the benchmark maps are included in the Figure 3. (2) Scalability: To evaluate the\nscalability of our method, we use a large-scale map containing over 100 heterogeneous obstacles. This setup supports\nscenarios with up to 100 robots, providing a challenging setting to examine the method\u2019s ability to generate feasible\nplans in high-dimensional and cluttered environments.\nEvaluation Metrics. Different algorithms are empirically evaluated based on Success rate ,Running time ,\nPath Length , and Acceleration . The Success rate indicates the proportion of test cases solved without collisions\nand within the time limit (900 seconds), Running time measures the computational efficiency required to generate a\nsolution, Path Length andAcceleration evaluate the quality of generated trajectories.\n8\n\n--- Page 9 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nMap Robots DGD MPD MMD SMD\nS T PS T P S T P S T PBasic6 100 12.2 1.21 769.1 1.12 100 27.1 1.12 100 254.3 1.10\n12 96 25.0 1.28 528.7 1.10 100 56.0 1.12 N/A N/A N/A\n18 96 65.7 1.33 89.4 1.09 96 86.3 1.13 N/A N/A N/ADense6 100 12.3 1.26 49.2 1.11 40 36.5 1.15 100 287.3 1.13\n12 100 32.9 1.35 0 N/A N/A 8 62.5 1.15 N/A N/A N/A\n18 76 47.8 1.37 0 N/A N/A 8 87.1 1.18 N/A N/A N/ARoom6 100 38.9 1.44 0 N/A N/A 24 55.5 1.16 100 181.0 1.19\n12 100 84.0 1.50 0 N/A N/A 4 122.6 1.14 N/A N/A N/A\n18 100 219.0 1.55 0 N/A N/A 0 N/A N/A N/A N/A N/AShelf6 100 64.6 1.30 0 N/A N/A 32 48.5 1.18 100 274.3 1.16\n12 100 131.5 1.33 0 N/A N/A 4 95.1 1.22 N/A N/A N/A\n18 84324.8 1.38 0 N/A N/A 0 N/A N/A N/A N/A N/A\nTable 1: Success rate (S, in percentage), running time (T, in seconds), and path length (P).\nCompeting Methods. The proposed approach is compared against three SOTA diffusion-based baseline methods:\n1.Motion Planning Diffusion (MPD) : A state-of-the-art diffusion model for single-robot motion planning Carvalho\net al. [2023], which we extend to the multi-robot setting for comparison.\n2.Multi-robot Motion Planning Diffusion (MMD) : A method that integrates diffusion models with a classical\nsearch-based MAPF algorithm to generate MRMP solutions under soft collision constraints Shaoul et al. [2024].\n3.Simultaneous MRMP Diffusion (SMD) : The current SOTA method recently introduced in Liang et al. [2025]. It\nintegrates diffusion models with constrained optimization to generate collision-free trajectories for MRMP.\nThe implementation details are provided in Appendix C.\n5.2 Comparison across Methods\nWe evaluate the performance of all methods on the standard MRMP benchmark, comparing success rates, runtimes,\nand path lengths across scenarios of increasing complexity and robot count (6, 12, and 18 agents). Full results are\nsummarized in Table 1, with additional metrics and ablations provided in Appendix B.\nBaseline Performance\nMotion Planning Diffusion (MPD) achieves the lowest runtimes and path lengths when successful. This is the case for\nthe simplest problems (Basic maps with 6 robots). However, MPD fails to scale, consistently failing to generate feasible\nsolutions beyond three robots in any more complex scenario. This underscores the limitations of unguided diffusion in\nmulti-agent settings with tight coupling.\nMulti-robot Motion Planning Diffusion (MMD) improves substantially over MPD by jointly modeling all agents. It\nmaintains high success rates on Basic maps with up to 18 robots. However, its performance sharply degrades in more\nconstrained environments. For instance, on Room and Shelf maps with 12 or more agents, MMD fails consistently.\nThis breakdown is attributed to its lack of explicit coordination mechanisms, which leads to congestion and deadlocks\nin narrow passages.\nSimultaneous MRMP Diffusion (SMD) shows high-quality planning with 100% success rates for up to 6 robots.\nHowever, its computational cost is orders of magnitude higher than other methods. For 12 or more robots, the running\ntime becomes prohibitively long, and no solution is obtained within the imposed time limit.\nDiscrete Guided Diffusion (DGD)\nDGD outperforms all baselines in both success rate and computational efficiency. By decomposing the MRMP problem\ninto multiple region-level subproblems using a structured MAPF schedule, DGD solves each subproblem independently\nand in parallel, significantly reducing planning overhead. DGD attains over 92% success rate across all settings\nexcept the most challenging (Dense and Shelf maps with 18 robots), where it still leads with a success rate of 76% .\nAdditionally, it achieves such results with lowest runtimes for the non-trivial benchmarks. Notably, on Dense maps with\n6 robots, DGD matches SMD\u2019s perfect success rate while using only 4% of its runtime.\n9\n\n--- Page 10 ---\nLiang, Koenig and Fioretto \u2013 preprint.\n(a) Dense Maps.\n (b) Shelf Maps.\nFigure 4: Trajectories generated by DGD.\nFigure 5: Trajectories generated by DGD on large maps. The figure is horizontally cropped for readability, with a\ndashed line on the bottom indicating continuation. See Appendix B for the full version.\nDGD\u2019s path lengths are comparable to those of MPD and MMD. While the average path length appears slightly higher,\nthis is primarily because the averages are computed only over successful trials. In more challenging scenarios, where\nMPD and MMD often fail, DGD still succeeds, albeit with longer paths due to the complexity of the environment.\nExample trajectories generated by DGD are shown in Figure 4 and those for the baselines in Appendix B.\n5.3 Scalability Analysis\nTo evaluate the scalability of DGD, we test it on large-scale environments containing a diverse mix of obstacle types\nwithin a single map. These environments feature 104obstacles and 100robots, substantially exceeding the complexity\nand scale of standard MRMP benchmarks.\nAs in earlier experiments, DGD decomposes the global MRMP problem into a set of independent subproblems, each\nconfined to a convex region. This decomposition enables efficient parallelized planning, and allows DGD to scale\ngracefully to high-dimensional instances. Representative trajectories generated by DGD in this large-scale setting are\nshown in Figure 5 (figure cropped due to large size).\n10\n\n--- Page 11 ---\nLiang, Koenig and Fioretto \u2013 preprint.\n(a) DGD.\n (b) MAPF.\nFigure 6: Trajectories generated by DGD and MAPF.\nTo the best of our knowledge, DGD is the first diffusion-based MRMP method capable of generating feasible solutions\nin environments with over 100 obstacles and 100 robots. In contrast to prior diffusion approaches, which have been\ndemonstrated only on up to 40 robots in obstacle-free settings Shaoul et al. [2024], DGD achieves a 2.5 \u00d7improvement\nin robot count while simultaneously addressing significantly more complex environments . This is significant: scalability\nis a key impediment to apply generative models to real-world multi-robot systems, where both geometric complexity\nand agent coordination pose significant challenges, and Thus, this works makes a significant step towards practical\ndiffusion-based solvers for multi-robot planning.\n5.4 Comparison between DGD and MAPF\nWe present a comparison between the MAPF solution and the trajectory generated by our DGD method for the same\ninstance. As shown in Figure 6, the MAPF solution is restricted to a discrete grid, resulting in suboptimal paths with\nunnecessary turns and increased travel distance. In contrast, DGD generates trajectories with shorter path lengths while\nmaintaining collision-free guarantees. For example, the highlighted blue robot follows a near-optimal straight-line path\nunder DGD, whereas the corresponding MAPF trajectory is longer and more convoluted. This comparison illustrates\nthat DGD not only benefits from the spatiotemporal guidance provided by the MAPF solution but also achieves\nhigher-quality trajectories by operating in continuous space.\n5.5 Limitation Anslysis\nFigure 7: Partial trajectories.We believe that DGD offers strong potential for advancing multi-robot coordina-\ntion. One limitation, however, lies in the relatively high acceleration occasionally\nobserved in DGD-generated trajectories, which is caused by abrupt changes in\nvelocity. Figure 7 shows a subset of trajectories generated by DGD on a dense\nmap with 18 robots. The red dashed circles highlight two regions where robots\nundergo sharp velocity changes, corresponding to the green and orange robots.\nGray dashed lines indicate the cropped boundary.\nThese discontinuities typically arise near the boundaries between adjacent convex\nregions and result from the absence of explicit consistency constraints across\nsubproblems during trajectory generation. While DGD effectively generates\ncollision-free trajectories by leveraging spatiotemporal priors, enforcing inter-\nregion consistency is a promising direction for improving trajectory smoothness\nand physical realism. Despite such dynamics, DGD ensures collision-free paths\nby leveraging continuous-space generation guided by spatiotemporal priors.\n11\n\n--- Page 12 ---\nLiang, Koenig and Fioretto \u2013 preprint.\n6 Conclusion\nThis work introduces Discrete Guided Diffusion (DGD) , a method that leverages a decomposition strategy to enable\ngenerative diffusion models to efficiently generate collision-free trajectories for multi-robot systems. By decomposing\nthe original MRMP problem into multiple tractable subproblems, DGD alleviates the significant computational burden\nassociated with large-scale MRMP. To address the spatiotemporal dependencies across multiple robots, MAPF solutions\nare employed to guide diffusion models in generating solutions for each subproblem. In addition, an efficient constraint\nrepair mechanism ensures the feasibility of the generated trajectories.\nExtensive experiments across varying obstacle densities and increasing robot counts demonstrate that DGD achieves\nsignificantly higher success rates and lower running times than competing methods. Experiments on large-scale maps\nfurther validate its scalability and robustness in handling both static obstacles and dynamic interactions, making it a\npromising approach for real-world applications.\nWhile DGD achieves state-of-the-art performance on MRMP tasks, there are several promising directions to further\nenhance its capabilities. One opportunity lies in improving the decomposition process to produce more flexible\nsubproblem partitions. In addition, extending the current framework to incorporate interactions between adjacent\nsubregions could help better preserve temporal and spatial consistency across the full trajectory.\nAcknowledgment\nThis research is partially supported by NSF grants 2334936, 2334448, 2533631, and NSF CAREER Award 2401285.\nThe authors acknowledge Research Computing at the University of Virginia for providing computational resources\nthat have contributed to the results reported within this paper. The views and conclusions of this work are those of the\nauthors only.\nReferences\nFederico Augugliaro, Angela P. Schoellig, and Raffaello D\u2019Andrea. Generation of collision-free trajectories for a\nquadrocopter fleet: A sequential convex programming approach. In 2012 IEEE/RSJ International Conference on\nIntelligent Robots and Systems , pages 1917\u20131922, 2012.\nJoao Carvalho, An T Le, Mark Baierl, Dorothea Koert, and Jan Peters. Motion planning diffusion: Learning and\nplanning of robot motions with diffusion models. In 2023 IEEE/RSJ International Conference on Intelligent Robots\nand Systems (IROS) , pages 1916\u20131923. IEEE, 2023.\nShao Yuan Chew Chia, Rebecca H Jiang, Bernhard Paus Graesdal, Leslie Pack Kaelbling, and Russ Tedrake. Gcs*:\nForward heuristic search on implicit graphs of convex sets. arXiv preprint arXiv:2407.08848 , 2024.\nJacob K Christopher, Stephen Baek, and Nando Fioretto. Constrained synthesis with projected diffusion models.\nAdvances in Neural Information Processing Systems , 37:89307\u201389333, 2024.\nJacob K Christopher, Michael Cardei, Jinhao Liang, and Ferdinando Fioretto. Neuro-symbolic generative diffusion\nmodels for physically grounded, robust, and safe generation. arXiv preprint arXiv:2506.01121 , 2025.\nMark De Berg, Otfried Cheong, Marc Van Kreveld, and Mark Overmars. Computational geometry: algorithms and\napplications . Springer, 2008.\nKang Ding, Chunxuan Jiao, Yunze Hu, Kangjie Zhou, Pengying Wu, Yao Mu, and Chang Liu. Swarmdiff: Swarm\nrobotic trajectory planning in cluttered environments via diffusion transformer. In Proceedings of the Computer\nVision and Pattern Recognition Conference , pages 4164\u20134173, 2025.\nIvan Fratric. PolyPartition: Tiny polygon partitioning and triangulation library. https://github.com/ivanfratric/\npolypartition , 2025. Accessed: 2025-05-01.\nJonathan D Gammell, Siddhartha S Srinivasa, and Timothy D Barfoot. Informed rrt*: Optimal sampling-based\npath planning focused via direct sampling of an admissible ellipsoidal heuristic. In 2014 IEEE/RSJ international\nconference on intelligent robots and systems , pages 2997\u20133004. IEEE, 2014.\nStefan Hertel and Kurt Mehlhorn. Fast triangulation of simple polygons. In Foundations of Computation Theory:\nProceedings of the 1983 International FCT-Conference Borgholm, Sweden, August 21\u201327, 1983 4 , pages 207\u2013218.\nSpringer, 1983.\n12\n\n--- Page 13 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nJonathan Ho, Ajay Jain, and Pieter Abbeel. Denoising diffusion probabilistic models. Advances in neural information\nprocessing systems , 33:6840\u20136851, 2020.\nWolfgang H\u00f6nig, James A Preiss, TK Satish Kumar, Gaurav S Sukhatme, and Nora Ayanian. Trajectory planning for\nquadrotor swarms. IEEE Transactions on Robotics , 34(4):856\u2013869, 2018.\nJiaoyang Li, Wheeler Ruml, and Sven Koenig. Eecbs: A bounded-suboptimal search for multi-agent path finding. In\nProceedings of the AAAI conference on artificial intelligence , volume 35, pages 12353\u201312362, 2021.\nJinhao Liang, Jacob K Christopher, Sven Koenig, and Ferdinando Fioretto. Simultaneous multi-robot motion planning\nwith projected diffusion models. arXiv preprint arXiv:2502.03607 , 2025.\nYunhao Luo, Chen Sun, Joshua B. Tenenbaum, and Yilun Du. Potential based diffusion motion planning. In Forty-first\nInternational Conference on Machine Learning , 2024.\nTobia Marcucci, Mark Petersen, David von Wrangel, and Russ Tedrake. Motion planning around obstacles with convex\noptimization. Science Robotics , 8(84):eadf7843, 2023.\nDaniel Mellinger, Alex Kushleyev, and Vijay Kumar. Mixed-integer quadratic program trajectory generation for\nheterogeneous quadrotor teams. In 2012 IEEE International Conference on Robotics and Automation , pages 477\u2013483,\n2012.\nChenlin Meng, Yutong He, Yang Song, Jiaming Song, Jiajun Wu, Jun-Yan Zhu, and Stefano Ermon. SDEdit:\nGuided image synthesis and editing with stochastic differential equations. In International Conference on Learning\nRepresentations , 2022.\nSaeid Naderiparizi, Xiaoxuan Liang, Berend Zwartsenberg, and Frank Wood. Constrained generative modeling with\nmanually bridged diffusion models. In Proceedings of the AAAI Conference on Artificial Intelligence , volume 39,\npages 19607\u201319615, 2025.\nKeisuke Okumura. Engineering lacam*: Towards real-time, large-scale, and near-optimal multi-agent pathfinding. In\nProceedings of the 23rd International Conference on Autonomous Agents and Multiagent Systems , pages 1501\u20131509,\n2024.\nJungwon Park, Junha Kim, Inkyu Jang, and H. Jin Kim. Efficient multi-agent trajectory planning with feasibility\nguarantee using relative bernstein polynomial. In 2020 IEEE International Conference on Robotics and Automation\n(ICRA) , pages 434\u2013440, 2020.\nL Rout, Y Chen, N Ruiz, C Caramanis, S Shakkottai, and W Chu. Semantic image inversion and editing using rectified\nstochastic differential equations. In The Thirteenth International Conference on Learning Representations , 2025.\nYorai Shaoul, Itamar Mishani, Shivam Vats, Jiaoyang Li, and Maxim Likhachev. Multi-robot motion planning with\ndiffusion models. arXiv preprint arXiv:2410.03072 , 2024.\nGuni Sharon, Roni Stern, Ariel Felner, and Nathan R Sturtevant. Conflict-based search for optimal multi-agent\npathfinding. Artificial intelligence , 219:40\u201366, 2015.\nRahul Shome, Kiril Solovey, Andrew Dobson, Dan Halperin, and Kostas E Bekris. drrt*: Scalable and informed\nasymptotically-optimal multi-robot motion planning. Autonomous Robots , 44(3):443\u2013467, 2020.\nJascha Sohl-Dickstein, Eric Weiss, Niru Maheswaranathan, and Surya Ganguli. Deep unsupervised learning using\nnonequilibrium thermodynamics. In International conference on machine learning , pages 2256\u20132265. pmlr, 2015.\nYang Song, Jascha Sohl-Dickstein, Diederik P Kingma, Abhishek Kumar, Stefano Ermon, and Ben Poole. Score-based\ngenerative modeling through stochastic differential equations. arXiv preprint arXiv:2011.13456 , 2020.\nRoni Stern, Nathan Sturtevant, Ariel Felner, Sven Koenig, Hang Ma, Thayne Walker, Jiaoyang Li, Dor Atzmon, Liron\nCohen, TK Kumar, et al. Multi-agent pathfinding: Definitions, variants, and benchmarks. In Proceedings of the\nInternational Symposium on Combinatorial Search , volume 10, pages 151\u2013158, 2019.\nPeter Werner, Alexandre Amice, Tobia Marcucci, Daniela Rus, and Russ Tedrake. Approximating robot configuration\nspaces with few convex sets using clique covers of visibility graphs. In 2024 IEEE International Conference on\nRobotics and Automation (ICRA) , pages 10359\u201310365. IEEE, 2024a.\n13\n\n--- Page 14 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nPeter Werner, Thomas Cohn, Rebecca H Jiang, Tim Seyde, Max Simchowitz, Russ Tedrake, and Daniela Rus. Faster\nalgorithms for growing collision-free convex polytopes in robot configuration space. arXiv preprint arXiv:2410.12649 ,\n2024b.\nXuesu Xiao, Bo Liu, Garrett Warnell, and Peter Stone. Motion planning and control for mobile robot navigation using\nmachine learning: a survey. Autonomous Robots , 46(5):569\u2013597, 2022.\nJingjin Yu and Steven LaValle. Structure and intractability of optimal multi-robot path planning on graphs. In\nProceedings of the AAAI Conference on Artificial Intelligence , volume 27, pages 1443\u20131449, 2013.\n14\n\n--- Page 15 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nA Missing Proof\nA.1 Proof of Theorem 1\nProof. We analyze the time complexity of the algorithm by examining its two main phases: Triangulation and Iterative\nMerging. Let |V|denote the number of vertices.\n(i) Triangulation. The main idea of triangulation is first to decompose the original nonconvex configuration space Cf\ninto simple polygons and then triangulate these simple polygons.\nAccording to Theorem 3.6 in De Berg et al. [2008], the decomposition of an arbitrary simple polygon with |V|vertices\ninto a set of y-monotone components can be executed in O(|V|log|V|)time. Once this decomposition is achieved,\nTheorem 3.7 in De Berg et al. [2008] establishes that each strictly y-monotone polygon admits a triangulation in linear\ntime with respect to the number of its vertices.\nCombining both stages, the overall computational complexity of triangulating Cfis thus asymptotically dominated by\nthe monotone decomposition step, yielding a total time complexity of O(|V|log|V|).\n(ii) Iterative Merging. Following triangulation, the algorithm enters a greedy, priority-guided region merging phase\nto produce a compact convex decomposition. Let O(|V|)denote the number of initial triangles. These serve as the base\nregions for merging.\nThe merging process is implemented via a max-heap data structure H, which stores all admissible region pairs (r1, r2)\neligible for merging. Each element in His keyed by a priority function p(r)that encodes topological information. For\neach region r\u2208R, adjacency information is precomputed, leading to O(|V|)total adjacency relations, each inserted\nonce into the heap during initialization.\nEach successful merge operation reduces the total number of regions by exactly one. Thus, in the worst case, there are at\nmostO(|V|)merges. Each merge operation requires a constant number of heap extractions and updates, each incurring\na logarithmic overhead due to the heap structure. Therefore, the total cost of all merge operations is bounded above by .\nOverall Complexity.. Combining both phases, the algorithm exhibits a worst-case runtime of O(|V|log|V|).\nA.2 Proof of Proposition 1\nProof. Because {Rj}is a partition of free space into disjoint convex regions, each robot position \u03c0m,i(t)lies in exactly\none region, so (a) holds.\nAlgorithm 2 records the first and last timesteps at which each robot enters and exits a region, which bounds its occupancy\ninterval in that region and yields (b).\nFinally, collision and feasibility constraints only involve robots sharing the same region at the same time; since no two\nrobots coincide outside their recorded intervals, regions induce independent subproblems, giving (c).\nA.3 Proof of Theorem 2\nProof. Beacause he projection operator PCc\nf(x)performs the following convex optimization problem at each iteration:\nx= arg min\ny\u2208Cc\nf\u2225x\u2212y\u22252\n2. (3)\nSince Cc\nfis convex and \u2225x\u2212y\u22252\n2is convex and continuously differentiable over Cc\nf, the optimization problem has a\nunique global minimum.\nLetError be the distance between xtand its nearest feasible point. Using Corollary 3 in Christopher et al. [2025], for\nany arbitrarily small \u03be >0, there exists a time tsuch that after the update:\nE\u0002\nError (U(PCc\nf(x)), Cc\nf)\u0003\n\u2264\u03be. (4)\nwhere U(\u00b7)is the update operator defined by Langevin dynamics.\nTherefore, the expected distance between the final generated trajectory and the feasible convex regions Cc\nfis bounded\nabove by \u03be, which means our DGD method yields a strictly smaller expected constraint violation and provides a\nfeasibility guarantee for the convex constraint set Cc\nf.\n15\n\n--- Page 16 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nMap Robots DGD DM MPD MMD SMD\nS T S T S T S T S TBasic3 100 6.5 124.7 92 9.3 100 13.1 100 76.6\n6 100 12.2 0 N/A 769.1 100 27.1 100 254.3\n9 100 17.4 0 N/A 729.9 100 41.4 100 504.0\n12 96 25.0 0 N/A 528.7 100 56.0 N/A N/A\n15 96 41.4 0 N/A 1210.3 100 70.9 N/A N/A\n18 96 65.7 0 N/A 89.4 96 86.3 N/A N/ADense3 100 6.6 0 N/A 888.3 60 19.1 100 81.2\n6 100 12.3 0 N/A 49.2 40 36.5 100 287.3\n9 100 18.3 0 N/A 0 N/A 28 51.4 100 582.1\n12 100 32.9 0 N/A 0 N/A 8 62.5 N/A N/A\n15 96 37.0 0 N/A 0 N/A 4 72.4 N/A N/A\n18 76 47.8 0 N/A 0 N/A 8 87.1 N/A N/ARoom3 100 17.1 44.1 12 8.8 60 28.2 100 72.6\n6 100 38.9 0 N/A 0 N/A 24 55.5 100 181.0\n9 100 59.9 0 N/A 0 N/A 8 142.4 96 239.4\n12 100 84.0 0 N/A 0 N/A 4 122.6 N/A N/A\n15 100 115.5 0 N/A 0 N/A 0 N/A N/A N/A\n18 100 219.0 0 N/A 0 N/A 0 N/A N/A N/AShelf3 100 31.5 44.1 32 9.1 68 23.7 100 88.0\n6 100 64.6 0 N/A 0 N/A 32 48.5 100 274.3\n9 100 80.4 0 N/A 0 N/A 8 61.6 96 607.8\n12 100 131.5 0 N/A 0 N/A 4 95.1 N/A N/A\n15 92 187.0 0 N/A 0 N/A 0 N/A N/A N/A\n18 84 324.8 0 N/A 0 N/A 0 N/A N/A N/A\nTable 2: Success rate (S, in percentage) and running time (T, in seconds) across all methods. DM is a standard diffusion\nmodel trained on feasible trajectories to directly solve MRMP. The reported running time for DGD is measured under\nparallel execution.\nB Additional Results\nB.1 Detailed Comparison across Methods\nWe provide detailed results for all methods across four metrics: success rate, running time, path length, and acceleration.\nThese results are presented in Table 2 and Table 3.\nTable 2 presents the success rate (S) and running time (T) across all methods. Across all maps and agent counts, DGD\nmaintains 100% or near- 100% success , even in the most challenging Room and Shelf settings with 18 robots. This\nhighlights the strong generalization and feasibility enforcement of our method. DM fails to generate feasible trajectories\nin all but the easiest scenarios (3 robots). It yields zero success in nearly all settings with 6 or more robots, confirming\nits limited capacity to handle hard constraint satisfaction. While SMD occasionally matches DGD in success rate, it\ndoes so at significantly higher computational cost. For example, in the Basic map with 9 robots, both DGD and SMD\nreach 100% success, but DGD requires 17.4s while SMD takes over 500s. DGD provides a favorable balance between\nrunning time and feasibility.\nTable 3 reports the average path length (P) and acceleration (A) across different map types and robot counts. DGD\nconsistently exhibits longer trajectories and higher acceleration compared to the baselines. This behavior is expected, as\nDGD is the only method capable of handling a broader range of challenging instances, particularly those involving\ndense environments and large robot teams. These instances naturally require longer paths due to more complex\nnavigation requirements. The increased acceleration values are primarily caused by abrupt transitions between convex\nregions. Our current framework does not explicitly regulate these transitions, which can result in sharp velocity\nchanges. Incorporating transition-aware smoothing or directly optimizing acceleration during inter-region movement is\na promising direction for future work.\n16\n\n--- Page 17 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nMap Robots DGD DM MPD MMD SMD\nP A P A P A P A P ABasic3 1.16 0.008 1.11 0.005 1.11 0.006 1.12 0.006 1.10 0.005\n6 1.21 0.011 N/A N/A 1.12 0.006 1.12 0.006 1.10 0.006\n9 1.26 0.013 N/A N/A 1.08 0.008 1.12 0.006 1.12 0.006\n12 1.28 0.014 N/A N/A 1.10 0.009 1.12 0.006 N/A N/A\n15 1.31 0.014 N/A N/A 1.09 0.009 1.12 0.006 N/A N/A\n18 1.33 0.015 N/A N/A 1.09 0.008 1.13 0.006 N/A N/ADense3 1.17 0.007 N/A N/A 1.14 0.008 1.10 0.006 1.12 0.006\n6 1.26 0.012 N/A N/A 1.11 0.008 1.15 0.006 1.13 0.007\n9 1.30 0.014 N/A N/A N/A N/A 1.16 0.006 1.13 0.008\n12 1.35 0.016 N/A N/A N/A N/A 1.15 0.006 N/A N/A\n15 1.35 0.017 N/A N/A N/A N/A 1.17 0.007 N/A N/A\n18 1.37 0.017 N/A N/A N/A N/A 1.18 0.007 N/A N/ARoom3 1.36 0.008 1.12 0.006 1.12 0.007 1.22 0.007 1.17 0.008\n6 1.44 0.013 N/A N/A N/A N/A 1.16 0.007 1.19 0.007\n9 1.49 0.014 N/A N/A N/A N/A 1.15 0.007 1.22 0.008\n12 1.50 0.015 N/A N/A N/A N/A 1.14 0.008 N/A N/A\n15 1.52 0.016 N/A N/A N/A N/A N/A N/A N/A N/A\n18 1.55 0.016 N/A N/A N/A N/A N/A N/A N/A N/AShelf3 1.27 0.008 1.13 0.005 1.15 0.007 1.16 0.006 1.14 0.007\n6 1.30 0.011 N/A N/A N/A N/A 1.18 0.007 1.16 0.008\n9 1.31 0.013 N/A N/A N/A N/A 1.16 0.007 1.17 0.009\n12 1.33 0.013 N/A N/A N/A N/A 1.22 0.008 N/A N/A\n15 1.36 0.014 N/A N/A N/A N/A N/A N/A N/A N/A\n18 1.38 0.015 N/A N/A N/A N/A N/A N/A N/A N/A\nTable 3: Path length(P) and acceleration (A) across all methods.\n(a) Basic Maps.\n (b) Dense Maps.\n (c) Room Maps.\n (d) Shelf Maps.\nFigure 8: Representative trajectories generated by DGD across different map types.\nB.2 Example Trajectories for All Methods\nWe visualize example trajectories for each method on 18-robot instances, including only those where the method\nproduced feasible solutions. Figure 8 shows the representative trajectories generated by DGD in 18 robot instances\nacross the four types of maps. Figure 9 presents the corresponding results for MMD on basic and dense maps. For\nvisualization purposes, we apply the Savitzky\u2013Golay filter, which is widely used in multi-robot motion planning to\nsmooth trajectories Shaoul et al. [2024].\nWe also present the full version of the results on the large map in Figure 10.\nC Implementation Details\nSoftware : The software used for experiments is Rocky Linux release 8.9, Python 3.8, Cuda 12.2, and PyTorch 2.1.2.\nHardware : For each of our experiments, we used the NVIDIA RTX A6000 GPU.\n17\n\n--- Page 18 ---\nLiang, Koenig and Fioretto \u2013 preprint.\n(a) Basic Maps.\n (b) Dense Maps.\nFigure 9: Representative trajectories generated by MMD on basic and dense maps.\nFigure 10: Trajectories generated by DGD on large maps.\nC.1 MRMP Details\nIn our experiments, the size of each local map was 2\u00d72units. The robot radius was set to 0.04 units in all cases, except\nfor the large-scale map, where it was 0.005 units. The obstacle sizes in basic and dense maps varied between 0.05 and\n0.1 units.\n18\n\n--- Page 19 ---\nLiang, Koenig and Fioretto \u2013 preprint.\nHyperParameters Value\nDiffusion Sampling Step 25\nLearning Rate 3e-4\nBatch Size 64\nOptimizer Adam\nTable 4: Hyperparameters for Training in Experiments.\nC.2 Training Details\nOur implementation builds upon the official code of Shaoul et al. [2024], Li et al. [2021], and Fratric [2025], with\nmodifications to accommodate our specific requirements. Since MMD performs well in generating collision-free\ntrajectories in obstacle-free environments, we leverage it to construct feasible trajectory datasets. Specifically, we\nfirst train MMD on single-robot motion planning tasks and then use it to generate multi-robot trajectories for training.\nTable 4 summarizes the hyperparameters used during training.\n19",
  "project_dir": "artifacts/projects/enhanced_cs.AI_2508.20095v1_Discrete_Guided_Diffusion_for_Scalable_and_Safe_Mu",
  "communication_dir": "artifacts/projects/enhanced_cs.AI_2508.20095v1_Discrete_Guided_Diffusion_for_Scalable_and_Safe_Mu/.agent_comm",
  "assigned_at": "2025-08-28T20:48:10.115083",
  "status": "assigned"
}